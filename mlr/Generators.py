import numpy as np
import pandas as pd
import statsmodels.api as sm


class Generators:
    """
    Methods for generating regression datasets
    
    random_dataframe: Generates a randomized Pandas DataFrame
    """

    def __init__():
        pass

    def random_dataframe(
        coeff_array=None,
        num_samples=100,
        num_features=3,
        dist_type="Normal",
        scaled=False,
    ):
        """
        Generates a randomized Pandas DataFrame for regression problem
        
        Arguments:
            coeff_array: You can pass on an array (list, tuple, or Numpy array) of coefficients for the regression problem
            num_samples: Number of data samples (rows in the dataframe)
            num_features: Number of features (numerical) for the problems
            dist_type: Probability distribution type for the error terms. Could be either 'Normal', 'Uniform', 'Beta', 'Gamma', or 'Poisson'
        
        Returns:
            A Pandas DataFrame with <num_samples> rows and <num_features>+1 columns.
            The last column is the target value.
            It is generated by adding noise (errors) to a linear model.
            The linear model is formed from <num_features> coefficients, generated randomly, or the coefficients you supplied.
            
        """

        def round_array(arr, digit=3):
            """
            Helper function to round out the Numpy array floats
            """
            result = []
            for a in arr:
                result.append(round(a, digit))
            return np.array(result)

        X_mult = 10
        coeff_min = -0.5
        coeff_max = 1.0
        coeff_mult = 10
        noise_mult = 10

        assert dist_type in [
            "Normal",
            "Uniform",
            "Beta",
            "Gamma",
            "Poisson",
        ], "Distribution type unknown/not supported"

        if coeff_array != None:
            assert (
                type(coeff_array) == list or type(coeff_array) == tuple
            ), "A list, tuple, or numpy array must be passed as the coefficient array"
            coeff = round_array(np.array(coeff_array))
            num_features = len(coeff)
        else:
            c = coeff_mult * (
                coeff_min + (coeff_max - coeff_min) * np.random.random(num_features)
            )
            coeff = round_array(c)

        X = X_mult * np.random.random(size=(num_samples, num_features))

        if dist_type == "Normal":
            noise = noise_mult * np.random.randn(num_samples)
        elif dist_type == "Uniform":
            noise = noise_mult * np.random.random(num_samples)
        elif dist_type == "Beta":
            noise = noise_mult * np.random.beta(1, 1, num_samples)
        elif dist_type == "Gamma":
            noise = noise_mult * np.random.gamma(1, 1, num_samples)
        elif dist_type == "Poisson":
            noise = noise_mult * np.random.poisson(num_samples)

        y = np.dot(coeff, X.T) + noise
        y = y.reshape(num_samples, 1)

        feature_cols = ["X" + str(i) for i in range(num_features)]
        target_col = ["y"]
        cols = feature_cols + target_col

        if scaled:
            X /= X.max()
            y /= y.max()

        data = np.hstack((X, y))
        df = pd.DataFrame(data=data, columns=cols)

        return df
